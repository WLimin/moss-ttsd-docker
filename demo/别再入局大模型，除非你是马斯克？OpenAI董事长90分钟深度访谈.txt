[S1]别再入局大模型，除非你是马斯克？OpenAI董事长90分钟深度访谈
智东西·2025年08月03日 09:30
Agent创企可能成为下一代“SaaS”公司。

[S1]OpenAI的董事会主席，居然劝大家别再做大模型了？ 

智东西8月2日消息，近日，海外知名科技博客Lenny's Podcast放出了与OpenAI董事会主席、Agent创企Sierra创始人Bret Taylor的一则高信息量对谈。在这场时长90分钟，实录字数近2万字的对谈中，Bret Taylor深度分享了他对AI行业未来发展格局与高价值创业方向的见解。 

在正式阅读采访内容之前，我们有必要首先了解下[S2]Bret Taylor传奇的职业生涯。 

2003年，他在斯坦福大学硕士毕业后，成为谷歌最年轻的产品经理，并打造出上线首日即获得千万流量的谷歌地图，彻底重塑了本地生活行业。 

2007年离开谷歌后，Bret Taylor创办了社交媒体公司FriendFeed，并发明了信息流（Newsfeed）、点赞按钮等现代社交媒体中的核心元素。他最终以近5000万美金的价格将FriendFeed卖身Facebook，而自己则加入Facebook担任CTO一职。 

2012年，Bret Taylor离开Facebook，创立协作文档企业Quip，最终将Quip以7.5亿美元的天价卖身Salesforce，而他本人则加入Salesforece，最终担任联席CEO一职。 

2023年初，当生成式AI技术刚刚兴起时，Bret Taylor又果断离开Salesforce，创办Agent创企Sierra，同年，他还加入OpenAI，并担任董事会主席。

可以说，Bret Taylor过去20多年的职业生涯，每一步都精确踏在风口上，而他横跨CEO、CTO、COO、CPO、产品经理、工程师、董事会成员等所有不同层级、不同岗位的成功经历，对AI时代的所有创业者都依旧有借鉴意义。 

这场访谈的核心信息如下： 

1、AI市场将出现三大板块——模型、工具与应用。模型市场的新创企已没有活路，除非能像马斯克那样筹集数十亿美元的资金。工具市场面临着前沿模型公司的冲击，价值将在应用层集中释放。

2、谷歌地图从失败产品谷歌黄页发展而来，这表明在新技术出现时，与其直接将过去的体验数字化，不如创造全新体验，回答新客户“我为什么要用它”的问题。

3、Agent就是新时代的应用，会是AI产品的主要形态之一。由于其高度自动化、结果可衡量的特点，Agent让企业能直接看到AI带来的生产力提升，从而促进购买。其模式与SaaS公司类似，利润率更高。 

4、AI不应按Token计费，而是应该按结果计费。在结果导向的计费模式中，供需双方目标统一：企业希望靠AI产品拿到满意的工作成果，而AI公司打造出能交付好结果的产品才能赚到钱。 

5、随着AI取代人类编程，写代码的成本不断降低，而Python等为了让人类编程更加轻松的语言，其实并不适合AI的特点。我们亟需为AI重构一套既适合构建复杂系统又便于灵活调整的编程系统。 

6、由于产品能力不足，现有AI编程工具往往会在生产场景中帮倒忙。此类问题大部分都是由于模型缺乏足够上下文，可通过MCP解决这一问题。 

7、做AI应用，不能只等着底层模型自己进步。模型的进步终将发生，但如果想提前兑现AI的潜力，就得靠应用中的工程设计，这也是应用型AI公司存在的根本原因。 

8、AI产品市场化有三种模式——开发者主导、产品驱动和传统直销。前两种模式虽受创业者欢迎，但难以将规模做大，或是适用范围有限，许多AI公司选错策略，应考虑进行更多直销。

9、学习计算机不等于写代码，编程可能会被AI取代，但理解原理，掌握系统性思维，在AI时代仍旧是软件工程的基础。

10、创业者需要对自己的身份保持灵活，愿意不断变化，并且能够准确判断：我现在做什么工作，才能产生最大的影响力。

11、鼓励孩子们将AI作为生活的一部分。ChatGPT可以促进教育平权，但也会导致拥有强主观能动性与弱主观能动性的学生的两级分化。 

以下是Bret Taylor深度访谈的完整编译（为提高可读性，智东西调整了部分问答的顺序，并在不违背原意的前提下进行了一定的增删修改）： 
01.
AI市场将出现三大板块
价值将在应用层集中释放

[S1]主持人：我们先来聊聊AI的商业战略。现在很多创业者最关心的问题之一是：我该做什么？基础模型公司会不会把我做的事情直接吞掉？你一方面在创业做AI，一方面又是OpenAI的董事会成员。你认为AI市场会如何演化？创业者应该把精力放在哪些地方，又该避免哪些方向？

[S2]Bret Taylor：我认为AI市场可以分成三个主要板块，它们最终都会是相当有分量的市场。我讲讲我的整体判断。 

第一类是“前沿模型市场”或者说“基础模型市场”。

我认为这个市场最终只会被少数几家超级规模公司和大型实验室掌控，就像现在的云基础设施服务市场一样。原因很简单，打造一个前沿模型是资金密集型的事情。你必须拥有巨额的资本支出能力，才能训练出这些模型。 

所有试图做这件事的初创公司，要么已经被收购，要么即将被收购，比如Inflection、Adept、Character AI等。我认为这一市场目前并没有一个适合初创公司的可行商业模式，原因是模型训练所需的资本投入实在太大，而且初创公司没有足够的融资空间，无法撑到达到“逃逸速度”。同时，基础模型本身作为资产，它的价值衰减非常快，所以你必须拥有规模优势，才能从中获得合理回报。 

我认为，几乎没有创业者应该去打造基础模型。

[S1]主持人：除非你是马斯克。

[S2]Bret Taylor：是的，马斯克他确实不一样，他有能力筹集数十亿美元的资本。我猜你的听众大多数都没有这个能力。而他是这个时代最厉害的创业者之一，他就是不同，大家不要拿自己去和他比。

市场的另一部分是“工具层市场”。

很多人都在“淘金热”中卖铁锹，这里面包括数据标注服务、数据平台、评估工具，还有一些专用模型，比如ElevenLabs的语音模型就非常优秀，被很多公司使用。这个市场的核心问题在于：想在AI时代取得成功，需要哪些工具和服务？ 

但这个市场也有风险，它距离“太阳”太近了。就像云服务市场里，各种云平台提供商（AWS、Azure等）自己也都在往上游走，提供各种工具。这种靠近基础设施层的公司，很容易被平台商直接替代。

当然，也有真正有价值的公司，比如Snowflake、Databricks、Confluent等。但也有不少公司因为基础设施平台自己推出类似功能而被淘汰。 

对这类公司来说，最大的风险是：基础模型公司某天在开发者大会上，可能突然就推出了创企提供的工具，那该怎么办？ 

可能会有很多人需要你的工具，但问题是，如果基础模型公司推出了和你类似的工具，人们为什么还要选择你？工具层这个市场的潜力很大，但也比较危险。 

第三部分是“应用型AI市场”。

我认为这部分将由那些构建Agent的公司主导。Agent就是新时代的应用，这会是AI产品的主要形态之一。我的公司Sierra帮助企业构建能接电话、接客服聊天的Agent，用于提升客户体验和服务效率。 

还有像Harvey这样的公司，为法律和准法律领域构建Agent，比如反垄断审查、合同审查等等。也有做内容营销的公司，还有专做供应链分析的公司。 

我觉得这类公司更像是“软件即服务（SaaS）”的模式，它们的利润率可能会更高，因为销售的产品是业务成果，而不是模型的副产品。 

当然，它们也得向基础模型公司“交税”，为使用底层模型而付费，这也是为什么这些模型提供商最终会发展成极其大规模的公司，但它们的利润率可能会略低一些。 

我认为应用的市场将变得不那么技术化。如果你思考一下最纯粹形式的软件即服务，人们并不会去问你用了什么数据库，而是关心你的功能和特性。 

我认为Agent的未来也是如此，随着时间推移，产品会比技术本身更重要。就像我之前用的比喻，1998年Salesforce成立时，仅仅是在云端运行一个数据库就是一项技术成就。 

而如今，没有人会问你这个问题，因为你只需在AWS或Azure上启动一个数据库就行了，毫无难度。 

我觉得今天，在模型之上组织一个Agent流程听起来很复杂、很高级、很困难，但我确信三到四年内，随着技术进步，这一切都会变得容易。 

逐渐地，当人们谈论一家Agent公司时，它会看起来有点像SaaS公司。你会更少地谈论如何处理模型，就像现代SaaS产品中很少有人会问你用了什么数据库一样，而是会更多地询问你的工作流程和你带来了什么商业成果。你是为销售团队创造潜在客户？还是在降低采购成本？不管你提供什么价值，这个方向都会逐渐发展下去。

我对此非常兴奋。我并不认为初创公司应该去构建基础模型。你当然可以尝试，如果你对未来有愿景，那就去实现它，但我认为这是一个已经趋于集中、竞争激烈的市场。而我对另外两个市场非常感兴趣，尤其是随着构建Agent变得越来越容易，我们将会看到大量“长尾”Agent公司涌现出来。

我最近浏览了一个网站，列出了市值排名前50的软件公司。毫无疑问，前五大公司是像微软、亚马逊、谷歌这样的巨头，但接下来的50家全都是SaaS公司。其中有些公司令人兴奋，有些则非常无聊，但这正是软件市场的发展轨迹。

我认为我们会在Agent市场看到类似的趋势。它不会只是客户服务或软件工程等几个巨大市场，还会覆盖许多目前人们投入大量时间和资源的领域，而这些领域完全可以被一个Agent解决。但这需要创业者真正深入理解某个业务问题。我认为AI市场的巨大价值，将在这一领域释放。
02.
为何全力押注Agent？
流程自动化、结果可衡量

[S1]主持人：这太有启发了。这让我想起我曾在播客上采访Mark Benioff，你们曾是Salesforce的联合CEO。他对Agent极度痴迷，全程都在谈论Agent Force。显然你们看到了某些关键趋势，觉得必须全力投入Agent，这是未来的方向。那么，你认为人们到底忽视了什么？为什么这会是软件工作方式发生重大变革的关键？

[S2]Bret Taylor：去和经济学家，比如Larry Summers（他和我一起在OpenAI董事会）交谈，他们会从经济角度看技术的价值所在：技术推动了经济的生产力增长。

回顾历史，生产力的大幅跃升出现在上世纪90年代。很多我交流过的人都认为，那次飞跃是第一波信息化浪潮——企业开始使用ERP系统，把会计等内容搬进了电脑和数据库，甚至是主机系统。

我们说的还不是PC时代，而是更早期的企业信息化。那种变化是真正颠覆性的。想象一下，一个跨国企业的账本在计算机化之前需要多少人力才能完成。而信息化彻底改变了整个部门。

我举个例子来说明这个生产力提升。我父亲刚退休，是一位机械工程师。他说自己在70年代末进入工程行业时，公司大多数人都是绘图员。也就是说，你有一个设计方案，但需要为每个楼层、每个角度绘制视图，然后提供给承包商。

▲GM公司技术中心，展示了前CAD时代的工程设计（图源：Rare Historical Photo）

而现在，他所在公司已经没有绘图员这个职位了。设计图直接在AutoCAD上完成，现在甚至用Revit建模，直接出3D图纸，绘图这个流程已经完全消失了。这项工作根本不需要再做了。设计和绘图的分工也不存在了，只剩下设计本身。

这就是真正的生产力提升。机械工程公司的职责是做设计，绘图只是为了交付给施工方的中间产出，它本身并不增加实际价值，只是供应链的一部分。

从PC时代开始回顾软件产业发展史，我们确实获得了生产力提升，但远不如最初那次飞跃显著。我并不清楚原因，但这很有意思。技术带来的生产力提升，并没有如很多人预期的那样全面实现。

我认为Agent将再次拉动这条曲线，就像计算机早期那样。因为软件正从帮助个人提高效率，迈向自主完成完整任务。因此，就像机械工程公司里不再需要绘图员那样，未来也不会再需要人工去做某些工作了。这意味着这些人可以转向产出更高的作。

一小部分人就能完成更多事情，推动经济的整体生产力提升。企业软件销售会经历与客户之间关于“价值”的讨论。你需要设计一套略显复杂的逻辑，比如：假设你在销售一个销售类软件，如果每位销售人员的业绩提升5%，那么你们公司就应该因此多赚多少钱，所以你应该支付我们一百万美元。这样的讨论往往很难精确归因。

这也是为什么销售生产力软件会如此困难，我是通过切身经验学到的。很难评估让每个人的效率提升10%到底价值几何。你真的让他们效率提高了10%，还是其他因素在起作用？你其实并不清楚。

但现在，当一个Agent真正完成了一项任务，不仅确实以非常现实的方式推动了生产力提升，而且这种提升是可衡量的。这些因素结合在一起，让我觉得这是我们看待软件的方式上的一次跨越式变化，因为它可以自主完成工作，这种自主性本身就更直接体现了它对效率的推动作用，并且是可以量化的。因此人们对它的价值判断也会不同，这也是我相信软件应该基于结果来定价的原因。

我觉得它对软件行业的变革意义堪比云计算，甚至从技术角度来看可能更甚。从商业模式的转变角度来看，肯定是一次有“前后时代”之分的重大变革。我不知道还有多少人还在销售永久授权的本地部署软件，但现在应该已经非常少了。

我认为我们将经历类似的转变，整个市场会转向Agent，转向基于结果的定价方式。并不是因为那是唯一的选择，而是市场会自然地推动大家走向那条路，因为这显然是构建和销售软件的正确方式。
03.
按Token定价不合理
Agent应按结果定价

[S1]主持人：前段时间我和另一位嘉宾讨论了AI公司的定价策略，他非常认同你的观点——如果可以，就应该按结果定价。提出的逻辑和你刚才讲的一样。你能不能简单解释一下“基于结果定价”是什么意思？然后再以Sierra为例说明它是怎么运作的？

[S2]Bret Taylor：我先从Sierra的例子讲起，然后再泛化一下。我们在Sierra帮助公司构建面向客户的AI Agent，主要用于客户服务，也更广泛地服务于客户体验。

如果你在使用SiriusXM收音机时遇到问题，你打电话或在线聊天时接待你的就是我们的AI Agent Harmony。如果你用的是ADT的家庭安保系统，警报器出了问题，你也可以和他们的Agent沟通。还有Sonos音响等很多消费品牌都在用我们的产品。

运营电话客服中心时，每接一个电话都有切切实实的成本，大部分是人力成本。一通普通电话的成本可能在10到20美元之间，虽然其中有一部分是软件或通信费用，但主要还是接听者的薪资。

如果Agent能够接管这个电话并成功解决问题，这在行业中被称为“呼叫分流”或“问题封闭”，本质上意味着你节省了大约15美元，因为无需人工介入。

在我们的行业里，只要Agent能解决客户的问题，客户满意，且无需人工干预，我们就按照事先约定好的价格收费。我们称之为“基于问题解决的计费”。

当然也有其他结果导向的模式，比如我们的一些销售类Agent是按销售佣金来计费的。我们确实把Agent视为客户体验的一部分，像是品牌的礼宾服务。我们希望我们的商业模式与客户的业务模式高度一致。

正如你说的，Agent需要是自主运行的，结果必须是可衡量的。虽然这并非总能做到，但在大多数情况下是可行的。

这套模式特别好的一点在于，任何一个首席财务官或采购负责人，在面对主要供应商时，看着那长长的账单往往会感到困惑，很难判断自己到底有没有从合同中获得期望的价值。

按用量计费的方式，尤其是在基础设施领域比较流行的那种，是朝这个方向迈进的一步。但我并不认为“按Token数”就是衡量AI价值的好方法。我常用一个类比：现在大多数编程Agent是按Token或使用量计费的，就像那个著名的苹果工程师的故事——他有个差劲的经理要求他每天报告写了多少行代码，这种衡量方式对所有工程师来说都是荒谬的。

他后来在日报上报了一个负数，因为那天他重构了代码，删了很多行，这是他对这位上司的反击。我觉得Token计费就和那种逻辑类似。你用了很多Token，好像看起来不错，但真正的问题是：你有没有产出一个高质量的Pull Request？

这正是关键所在。我认为基于结果定价和基于用量定价之间有本质区别，尤其是在AI领域，两者甚至都未必相关联。你可以接一个很长的电话却没解决客户问题，客户可能还会在网上留下差评、再次打电话，那所有的投入都白费了，甚至造成了负面价值。我非常相信这种模式。

这种模式还统一了供需双方的目标。每一家科技公司都希望自己被视为合作伙伴，而非供应商。而在上述场景中，我们确实是每一个客户的合作伙伴，因为我们在追求同一个目标。 

我觉得软件行业就应该朝这个方向发展。这当然对公司的组织形态有很高要求，你必须真正能帮助客户实现他们的目标，不能只是把软件扔过去了事，因为如果没实现结果，你根本不会拿到钱。

采用这种模式后，公司就会变得极度以客户为中心。我觉得这会让软件行业变得更好，从第一性原理的角度看就是对的，对采购方也是合理的，对整个世界而言也是正确的方向。
04.
AI编程给企业“帮倒忙”
出错往往因为缺乏上下文

[S1]主持人：我们刚刚聊到了一些关于生产力提升的话题。现在媒体上对AI是否真的能提升效率抱有很多怀疑，比如“AI到底在做什么”、“真的让人更高效了吗”。最近有一项研究显示，AI甚至让工程师效率变低了。除了我们刚才谈到的客户体验之外，在你们公司，或者你们合作的其他公司中，还有看到明确的生产力提升吗？

[S2]Bret Taylor：我对AI提升生产力非常看好，但我确实认为目前很多工具和产品还比较不成熟。举个例子，现在几乎每家软件公司都会使用类似Cursor这样的工具来辅助开发者。多数人现在把Cursor当成自动补全的工具来用。

它还有很多Agent功能，OpenAI的Codex、Anthropic的Claude等都有类似功能，很多编程Agent方案正在涌现。

但其中一个问题是，由于技术还不成熟，Agent生成的代码里经常会有错误，而检查他人或者Agent生成的代码，实际上比修改自己写的代码还要难。

如果生成的代码经常出错，你需要花费大量的认知精力和时间去修复。事实上，如果它给你的客户带来了各种问题，你可能表面上是开发了很多新功能，但其实却把系统弄得更混乱，效果适得其反。

目前有几种有趣的技术路线。首先是很多AI创业公司正在开发代码审查工具。我认为“Agent的自我反思是非常关键的一点，用AI去监督AI其实非常有效。

你可以这样想：如果你做了一个Agent，准确率90%，这其实并不算太好。但要开发另一个Agent去找出那10%的错误，听起来却是个可以解决的问题。

假设这个“审查Agent”准确率也有90%，那么将两者组合起来，整体准确率就可以达到99%，这其实是一个数学问题。

可以用一个系统来生成代码，再用另一个系统来审查它，本质上就是用计算力来换取认知能力。可以层层叠加认知、推理、判断过程，从而产出更稳健的结果，这点让我非常兴奋。

另一个关键是“根因分析”。我们公司有一位工程师专门负责服务我们Cursor实例的MCP服务器。我们的理念是：当Cursor生成了错误的代码时，我们不只是去修复它，而是要找到根本原因，确保下次它能生成正确的代码。

这本质上是一种“上下文工程”。我们要思考的是：Cursor缺少了什么样的上下文信息，才导致它无法产出正确的结果？

我认为，那些希望在软件工程等部门实现生产力提升的人，如果想要现在就看到效果，就必须停止等待模型能力的升级，转而进行根因分析，弄清楚每一行糟糕代码的根源，并提供正确的上下文，构建合适的系统，让模型今天就能胜任这项工作。

这类工作可能会逐渐减少，对上下文工程的依赖也会减轻。但现在，你必须把这件事当作一个系统来思考。我看到很多人仍在等待模型自己变得更好。我想说，那终究会发生，但如果你想现在获得成果，你就得付出努力。这正是应用型AI公司存在的原因。

虽然工作并不简单，但它是可以做到的。对于那些使用像Sierra这样的平台的客户来说，没错，AI Agent不完美，但我们正在打造一个系统，让客户可以持续改进，形成正向循环。

如果你想把自动化解决率从65%提升到75%，我们有无数工具帮助AI实现这个目标。识别优化机会，搞清楚用户不满的原因，思考我们还能为Agent增加哪些新功能来提升解决率——你可以让AI帮你大海捞针式地找出关键问题，这才是优化这些系统的正确方式。

[S1]主持人：我以前从没听说过通过增加上下文来改进Cursor的做法，具体是怎么实现的？你是搭了一个MCP服务器，所有内容都要经过它，还是加了Cursor的规则？这个方法到底是什么？

[S2]Bret Taylor：这已经有点超出我的理解范围了，但基本上就是用MCP，这就是你给Cursor提供上下文的方式。我认为，如果模型本身能力没问题，却做出了错误决策，那问题就在于上下文不足。

要找出你的产品和代码库与这些编码Agent可用上下文之间的交叉点，然后从根本上修正问题，这就是核心原则。
05.
学计算机不等于写代码
掌握系统性思维很重要

[S1]主持人：你提到仍然把自己定位为工程师，听说你还会靠写代码放松。现在不少大学生在问：还值得学编程吗？未来几年这个领域会不会发生巨变？

[S2]Bret Taylor：我仍然觉得“学计算机科学”和“学写代码”是两回事。学计算机科学依旧非常有价值，因为它不只是写代码。理解大O记号、复杂度理论、算法，知道为什么两个复杂度相同的算法在实践中性能不同，为什么缓存未命中很重要——这些知识的意义远远超出敲代码本身。

写代码这件事，我认为会从“人往终端或VS Code里敲字符”变成“人操作一台代码生成机”，我认为这会成为软件工程的未来。不过，要用好这台机器，需要系统思维，而计算机科学正是培养系统思维最好的学科之一。

最终，AI会承担大量软件开发工作，但人的任务是操作这台机器去打造产品、解决问题。要有很好的系统性思维，必须理解技术与商业问题的交集，并设计能真正解决客户问题的系统。系统思维永远是做产品最难的部分。

举个简单例子：在Facebook设计NewsFeed时，设计师用Photoshop做的原型永远完美——照片漂亮、文字优雅、长度刚好、评论友善。一旦上线，真实数据进来，NewsFeed立刻惨不忍睹：照片质量差、文字长短不一、评论里还有人骂你。

▲早期的Facebook信息流（图源：Version Museum）

这时你才明白：用Photoshop设计NewsFeed是最简单的，真正难的是设计一个系统，让它在你无法掌控输入的情况下，依旧输出令人愉悦的内容和视觉体验。我们后来强制设计师必须用真实、凌乱的数据做原型，逼他们把过程做得更贴近现实。

AI生成代码、生成设计以后，你仍然需要在脑子里构建这套系统，理解什么难、什么易、什么可能、什么不可能。AI也能帮你做这件事。

我认为，随着AI Agents的出现，以及AI某些领域的能力接近“超人”水平，我们所使用的工具会出现深刻的变化。

人类不应再依赖于特定的行事方式，不应再纠结于“我现在擅长的事情，未来可能就没用了”这种问题。就像NASA早期用人类充当计算器一样，未来的人们可能会惊讶：“原来你们以前是一行行手写代码的？”

别因为“以后不用手写代码”就不去学这些学科，就像有人会说“我以后用不到数学就不学数学”。学数学的价值在于培养人的思维方式，同样的，计算机科学的基础知识，仍将是未来构建软件的基础。

尤其是在与比你聪明的系统协作时，它生成的代码你未必能一行行读完。你需要具备足够的能力，去约束它、引导它产出想要的结果，这需要大量技巧。
06.
Python对AI而言“太糟糕”
应为AI打造专用编程系统

[S1]主持人：这让我想起你最近在一档播客里提到的一个观点——你认为应该出现一种新的编程语言，这种编程语言更适合大模型而不是人类。能展开说说吗？

[S2]Bret Taylor：我不确定它该叫“语言”，我倾向叫“编程系统”，因为“语言”这个词可能太窄。如果把过去40年甚至更久的计算机史简化版一下，大概的过程就是：先造硬件，再用打孔卡告诉机器干什么；接着出现操作系统、分时系统，于是有了C、Fortran等高级语言；再往上抽象，就很少有人写汇编、写C语言了，更多人用Python、TypeScript。

▲用于早期计算机的打孔卡（图源：Wikipedia）

每一次抽象层提高，都让我们用更少的力气去干更大的事。今天再让人用React写一个可拖拽地图，很多工程师都能很快搞定，这在当年Google Maps时代是惊世骇俗的壮举。当Salesforce成立时，把数据库放到云端都是一件很困难的事情，能做到这点就已经是一条技术护城河了。现在，技术的护城河在不断缩窄，但产品的护城河依然存在。

如果我们假设写代码的人力成本趋近于零，那么我们过去几十年围绕“提高人类程序员效率”打造的所有抽象层的工具、语言，都需要重新评估。

我常开玩笑说，Python大概是大模型生成最多的语言，因为它在训练语料里无处不在，数据科学家又爱它。但从AI角度看，Python简直糟糕：慢、难验证、运行时错误多。它之所以存在，是为了让人写得舒服，像伪代码。

未来如果我们只需要操作代码生成机，我们根本不需要在乎语言对人类多“符合人体工学”，只在乎两件事：机器生成的代码能否被快速验证“确实做了我想要的事”；如果不对，能否很容易地进行改掉。

这就引出对“编程系统”的新需求。比如Rust之所以有意思，是因为编译器能静态保证内存安全，编译通过就等于没有内存泄漏。如果让AI生成一百万行C语言，你很难判断有没有泄漏；生成一百万行Rust，只要编译过就基本安全。

我们需要更多这种设计。如果人无法完全信赖AI的代码，需要逐行阅读、核验代码，那这将极大地限制编程的效率。如今，问题的关键就在于如何给人提供这种自动化核验的工具。

AI的自我核验当然是一种方式，让系统具备自我反思能力，确实是提高鲁棒性的一种有效手段。但我认为，如果不用再担心写代码是否繁琐，就可以重新考虑一些传统的技术手段，比如形式化验证、单元测试等。

把这些技术叠加起来，我脑中会浮现出一个画面，就像《黑客帝国》里的那个人，看着屏幕上流动的绿色代码，思考：我怎样才能构建出一个让操作者能够高效产出极其复杂、规模庞大的软件系统，并且确信它是正确的系统？

从这个目标出发来做设计，那你可能会改变编程语言、系统架构，甚至所有相关的构建方式。最有意思的是，这一过程中我们可以放宽许多限制，比如——“写代码是免费的”。这真的很酷。

那么在这种前提下，你会想做什么？哪种语言、编译器、测试框架、自我反思机制或监督模型才最适合？我认为这不是单一的编程语言问题，而是整个编程系统的设计问题。

一旦我们构建出这种系统，它将真正赋能创造者、开发者们，让他们得以构建出既复杂又鲁棒的系统。我对“vibe coding”感到非常兴奋，但我不认为“快速生成原型”曾是软件开发的核心瓶颈。

真正的挑战，是如何构建日益复杂的系统，并具备灵活改动它们的能力。可以回顾下当年Netscape浏览器从1.0到2.0的重写过程，很多人认为这就是它输给Internet Explorer的原因之一。

写出一个系统并不难，难的是维护它，并保证它的鲁棒性。我觉得我们正处于定义“下一代软件开发体系”的初期阶段，我非常期待它将如何演化。

[S1]主持人：当你这样的人在谈论要打造一种类似《黑客帝国》的编程体验，并认为这可能是未来的开发方式时，我真的觉得我们已经身处未来了。我迫不及待想看到它成真——这将是一次伟大的机会，也是一个非常有趣的项目。
07.
市场策略应与产品类型匹配
AI公司应重视直销模式

[S1]主持人：现在很多AI初创公司在市场化方面遇到困难。各种AI应用、产品层出不穷，你在AI产品，特别是Agent类产品的市场落地方面，有哪些经验值得大家借鉴？

[S2]Bret Taylor：我认为成功的市场落地路径其实就那几种，关键是要选对匹配你产品类别的方式。

第一种是开发者主导。

Stripe和Twilio就是这个典型，他们的市场策略是吸引某个工程师，通常在CTO负责的部门里，这些人有选择工具的决策权。这种方式适用于平台类产品。

如果你的产品是帮助某个业务部门的，那就不适用，因为这些业务线通常没有专属的工程师团队，也没有权限去随便下载库或接入服务。如果你的客户是初创公司，这种方式特别管用，因为初创团队的工程师常常有决策自由去选择他们喜欢的服务，来解决创始人提出的问题。

第二种是产品驱动增长。

虽然每家公司的产品都很重要，但这里的意思是用户可以直接在官网注册，通常可以试用，也可以用信用卡买几个账号。这适用于使用者和购买者是同一个人的情况。小型商业软件几乎都属于这类，因为个体户什么都得自己处理。

比如早期的Shopify，还有很多类似产品，主要面对小型商家，这种方式非常合适。但如果使用者和购买者不是同一个人，这方式就不灵了。比如报销软件，用的是普通员工，买的是财务部，用信用卡购买就不合逻辑，因为实际使用者并没有公司信用卡。

第三种是传统直销。

直销曾一度被认为过时了，但如果我想到最强的直销公司，很多都来自Oracle体系，比如SAP、ServiceNow、Salesforce、Adobe等。他们都通过传统销售流程向大企业的业务线销售产品。

由于产品驱动增长一度很火，很多公司也跟着走，确实也能催生出优秀产品。但如果产品驱动增长，导致你完全没有和真正的软件购买者打交道，那你是不会成长的。

我最近看到越来越多AI公司开始重新重视直销方式。因为AI的很多机会，确实是使用者和购买者不同的情况，确实需要这种市场推进方式。

很多创业者的问题是，选择了某种市场策略，却没有认真思考客户是怎么购买软件的。怎么评估软件的价值？我认为人们需要从第一性原理出发，更加深入思考。

坦率地说，我觉得很多公司其实应该更多地采用直销。尽管有些直销公司的产品质量名声不太好，但这只是个别情况。我很高兴看到直销正在市场中重新获得重视。

[S1]主持人：我觉得这个信息是很多创始人需要听到的，尤其是那些不具备商业背景的创始人，他们对“销售”本能抗拒，认为自己不擅长。但有时候你必须变得擅长这件事，这就是你能否成功的关键，不能只靠产品带动增长。
08.
从谷歌版黄页到谷歌地图
创造全新体验是成功产品关键

[S1]主持人：你在职业生涯中获得了许多难以置信的成就，我们稍后会谈到这些。但我想先从反面案例开始，聊聊你犯下的重大错误。你在构建产品时犯下的最大错误是什么？

[S2]Bret Taylor：这件事可能算不上最大的错误，但对我来说意义重大——这是我作为谷歌产品经理的第一次重大失误，也成为我作为产品经理成长过程中的重要转折点。 

我在2002年底或2003年初加入谷歌，是最早的助理产品经理之一，起初负责搜索系统，将索引规模从10亿扩展到100亿。表现不错后，我得到了Marissa Mayer（谷歌第一位产品经理）的信任，被安排负责一个全新产品项目。

对我来说，这是一次重要机会，也面临很多人的审视，毕竟我是个刚起步的年轻产品经理。

交给我的任务是：做本地搜索。当时黄页仍占主导，谷歌擅长搜索网页，却不擅长找水管工或餐厅，因为这类信息当时在网上并不丰富。即使存在，你也需要更精准的结果——比如在旧金山找水管工，而不是曼哈顿。这既是技术问题，也是产品和内容问题。 

我作为产品经理负责的第一版产品叫谷歌本地（Google Local）。现在回头看，基本上是Yahoo黄页翻版，只是把黄页搜索嫁接在谷歌搜索之上。通过精心构造的查询，你可以在搜索结果顶部看到这些列表，我们还有一个独立站点。 

▲谷歌本地测试版（图源：Version Museum）

谷歌本地重要到甚至出现在谷歌首页的导航栏里，与网页、图片并列。谷歌首页几乎任何链接都能带来巨大流量，但尽管这样，谷歌本地表现并不好。在拥有谷歌首页链接的情况下表现不佳，实在有点尴尬。 

对产品经理来说，没有比这种流量更好的机会了，但谷歌本地产品只是“还行”，并没有差异化。回头想，人们为什么要用它而不是Yahoo黄页？甚至为什么要用这些产品而不是黄页本身？它们只是把以前的黄页数字化了。 

我和Marissa、Larry（谷歌创始人、前CEO）等人进行了一次艰难的产品评审，虽然没有要被炒鱿鱼，但我的“光环”确实黯淡了一些。他们给了我一个机会做下一个版本，我的团队花了大量时间思考如何做出更吸引人的东西，而不是简单的数字化黄页，也不是简单复制其他产品。 

最终，我们找到了一条思路，这一产品就是谷歌地图。我们原本的搜索结果旁放了一个小地图，但一直是产品里最丑的部分，内部也常吐槽。但如果颠倒层级，把地图作为画布会怎样？ 

我们找到了Lars和Jens Rasmussen两兄弟，他们正在做地图产品。把他们招进公司后，我们开始探索这个方向，最终把地图、本地搜索、行车路线等当时各自独立的产品类别整合成谷歌地图，重新定义了行业，也改变了我的职业生涯。 

作为产品领导者，这让我彻底改变对产品的看法：你可以从从功能和特性的角度思考问题，但也该思考“人们为什么要用它”。谷歌地图推出第一天就有约1000万人使用，这在当时互联网的规模下非常惊人。 

▲2005年，谷歌地图测试版（图源：Medium）

2005年8月，我们整合了收购的Keyhole（后来的谷歌地球）提供的卫星图像，当天就有9000万人使用，每个人都想看看自己家的屋顶长什么样。 

谷歌地图成功背后的经验是：新技术出现时，与其直接将过去的体验数字化，不如创造全新体验，回答新客户“我为什么要用它”的问题。谷歌地图真正原生地利用了平台优势，这是纸质地图做不到的，是重大突破。 

卫星图像虽不是谷歌地图最重要的部分，却是“锦上添花”，形成了病毒式传播，甚至上了《周六夜现场》这档爆款电视节目，那一刻我们感觉这款产品真的成了。这也说明产品设计时要区分“为什么用它”和“长期价值”，这些经验和教训伴随着我后续所有产品的设计过程。 

[S1]主持人：这故事太棒了，一是让人知道即使像你这样成功的人也曾在谷歌CEO面前犯下大错，二是产品方面的经验，在现有的产品上稍作改进，往往很难成功，要找全新体验、差异化、更有吸引力的东西。
09.
优秀创始人应保持身份灵活
做能产生最大影响力的事

[S1]主持人：我们换个角度，来聊聊你的成功。你几乎把产品经理、工程师、CPO、COO、CTO、CEO等角色都干了个遍，极少有人能在所有这些层级和角色里都取得成功。你认为哪些心态、习惯或工作方式，是你刻意培养，并认为最有助于你取得成功的？

[S2]Bret Taylor：这确实是我引以为傲的一点，我为自己戴过不同“帽子”感到高兴。有趣的是，当我和只在其中一份工作中认识的同事见面时，他们往往用那段经历定义我。 

Facebook的人把我当工程师，谷歌的人当我是产品经理，Salesforce的人则觉得我是“穿西装的老板”，甚至怀疑我根本不会写代码，尽管我周末仍会写点代码作为消遣。 

我一直坚持一个原则：对自己的身份保持灵活。我通常自称工程师，但更广义地说，我认为自己是一个构建者（Builder）。我喜欢打造产品，而公司是实现这一点最有效的方式之一。我也相信技术与资本主义结合能带来巨大成果。 

因此，想做出真正有意义的东西，成为优秀的创始人，就不能固守某种身份，而是要随时变成公司最需要的角色。

每位创始人都会告诉你，销售是他们工作的重要部分：要向投资人推销公司，向候选人推销职位，向客户推销产品。你还需要良好的设计品味，不只是产品层面，也包括营销和获客等。如果你做的是技术公司，技术必须优先，这也是这个行业能够不断颠覆的原因。 

我尤其感谢Sheryl Sandberg（Facebook、Meta前首席运营官），她改变了我面对新工作的方式。 

当时我刚成为Facebook的CTO，这个职位一开始只是带一个小团队，我的角色更像是资深技术架构师。后来扎克伯格重组了公司，我突然负责平台、移动、产品、设计、工程，直接管理的人从几人扩展到上千人，是我带过最大的团队。 

▲Facebook时期的[S2]Bret Taylor（图源：alchetron）

虽然我在谷歌也做过管理，但规模小很多。这次上任Facebook CTO，我其实做得一般。有一次我在修改一份发给合作伙伴的PPT，一边改一边抱怨质量太差。 

Sheryl把我拉进会议室，给我上了一堂管理课：你要把团队带到你的高标准上。如果有人达不到，那计划里是否也包括请他们离开？这是非常直接的反馈，像是在给我上管理学第一课一样。 

她是那种反馈很直、甚至可能让人不舒服的人，但你知道她是在乎你，所以会认真听。那晚我回家越想越不舒服，有点防御心：她说得对吗？我真的搞砸了吗？ 

第二天醒来，我想通了：她是对的。我意识到我在潜意识里把工作范围局限在我喜欢做的事上，花时间做我热爱的产品和技术，想着“我是老板，可以做自己想做的事”，而不是问“我负责的团队今天最需要什么？”

当我换一种方式看待工作，我的行为也随之改变。让我惊讶的是，我竟然喜欢上了这种方式。我原以为自己只喜欢做工程和产品，但当我让一个组织变得更成功，那种成就感远超预期。 

比如，平台遇到合作伙伴问题，我花时间处理合作，看到平台更健康，合作伙伴也更成功，我为此感到自豪。我因此变得更好。我意识到，真正让我热爱的，可能不是写代码或设计产品，而是“产生影响”。 

那次对话让我养成一个习惯：每天醒来，我都会问自己，“我今天做什么，才能产生最大的影响力？”就像一个外部顾问团队在提醒我：聚焦这些事，才能最大化目标。 

有时是招聘，有时是产品，有时是工程，有时是销售。我变得更自省，也更愿意做原本不喜欢的事，因为当我看到我产生的影响时，我就喜欢它们了。 

我把这一切都归功于Sheryl。她让我意识到反馈的力量，也让我在给别人反馈时常常想到她——这些时刻甚至能改变职业生涯的轨迹。 

[S1]主持人：我最大的收获是这个问题：“我今天做什么，才能产生最大的影响力？”这是一个非常有力的思维工具，值得时刻记在心里。很多时候你一开始可能不愿意去做销售或招聘，但如果那是最有影响力的事，你去做了，也许会发现自己其实挺擅长，而且也喜欢。

[S2]Bret Taylor：我想再补充一点。对创始人和产品经理来说，有一个常见的陷阱是讲错故事，比如把“人们不喜欢我们的产品是因为 X”当成事实，告诉公司里的所有人，然后据此调整战略，如果判断错了，可能会导致公司方向彻底跑偏。

当你失去一笔交易时，销售往往会归咎于“价格太贵”，但真正的原因可能是客户根本没看到你的价值——问题在于产品缺乏差异化。结果，你围绕定价做文章，却忽略了更深层次的产品问题。

就像分手时人们不会直说“我不喜欢你了”，而是习惯性地说“不是你的问题，是我的问题”，因为我们总想维护关系的和谐。类似地，用户或客户在调研中给出的反馈也未必准确，你必须深入分析、抓住核心。

可惜，很多初创公司的创始人容易陷入“单议题选民”陷阱：工程师只信工程能解决一切，产品设计师只信一次redesign，而BD背景的人只信大合作。现实中，没有哪一种方法能一招搞定所有问题。

真正优秀的创始人，会清楚地认识到自己是有偏好的，人天然会更倾向用自己的强项去解决问题，但你需要保持警觉，时刻注意自己是不是因为习惯而选择了这一方向，而不是遵循真理。

创始人需要一个能够坦诚对话的联合创始人和领导团队，共同验证思路，确保方向正确。尽管“今天我能做的最有影响力的事是什么？”是一个极好的思考框架，但要准确回答它，却比你想象的要难得多。
10.
谷歌背景创始人常常忽视商业化
董事会和高质量建议有必要

[S1]主持人：你从过去的失败中学到了什么教训呢？

[S2]Bret Taylor：我们本来是要聊聊我的失败的，有点跑题了（笑）。FriendFeed是我的第一家公司。高峰期我们只有12名员工，却是我共事过最优秀的一群人。我和Jim Norris、Paul Buchheit（Gmail之父）、Sanjeev Singh（Gmail首位工程师）一起创办，核心成员来自谷歌和Gmail。 

我们做了一个社交网络，发明了Newsfeed（信息流）和“点赞”按钮，这些功能之后都很流行。当时我们发现平台上有很多评论都是“Wow”、“Nice”这样表示“我看到了”的内容，而我们想让评论区里有真正的讨论。点赞按钮就是这一问题的解决方案。

不过，我们只在土耳其、意大利和伊朗流行了起来，后来伊朗封了我们，只剩土耳其、意大利和硅谷。直到今天，还有人说“我爱FriendFeed”，我就说“那太好了”。

▲FriendFeed界面（图源：CNET）

但它不是一个成功的商业模式。我们是“关注型”社交网络，用户关注特定用户，获取信息，更像Twitter而非Facebook，分享的是新闻、兴趣、科研等内容。那年夏天，奥巴马和奥普拉等人都入驻了Twitter，我们被彻底碾压。

我们团队几乎全是工程师，埋头打磨产品。而Twitter专注拉名人入驻，这是“关注”场景下显而易见的策略：如果要打造一个基于关注的社交网络，那就得拉一些值得关注的人加入。虽然我们功能更多、上线更快、几乎零宕机，但我们却输了，这一失败和产品本身没有任何关系。

这也说明了谷歌出身的创业者一个通病：在谷歌太顺了，产品经理往往忽视分发、设计，甚至不思考商业模式，因为从广告上已经赚得盆满钵满。相比之下，PayPal黑帮这样的人在创业上学得更多，我们被现实打脸了。

我可以说出FriendFeed产品方面的很多问题，但我认为那不是失败的关键。我后来逐渐补齐了短板，但如何准确判断应该做什么是很困难的。没经验时很难有直觉。

做FriendFeed时，我不是找不到名人加入，而是根本没去找有经验的人咨询相关问题。科技圈信息很多，难的是选择听谁的。我们当时太专注产品，没请外部人指出问题，也没请教行业专家。这让我成为董事会和高质量建议的坚定信徒。

[S1]主持人：如何判断谁的意见值得听？

[S2]Bret Taylor：这确实需要判断力。有一点很重要：一个人表达意见时的自信程度，和意见的质量往往并不正相关。现在播客这么多，有时我对非常熟悉的话题，发现最自信的说法其实错得离谱，却极具说服力。所以得靠判断力。

一个办法是：不仅问“我该怎么做”，还问“我该去问谁”。你会发现有些人总被反复推荐，那就是强信号。

另外，问建议时不要只问“做什么”，还要问“为什么”。像个两岁小孩一样不停地问“为什么”，直到你理解对方给出建议的框架。

其实，大部分建议往往来自极少数经历，人们会说“永远别做X”或“永远做Y”，但那其实只是某次经历让他们后悔或庆幸。得多问问不同人的意见，据此整理出你的第一性原理，应用时要分情况，而不是简单照抄。

说到底，判断力来自自省和复盘。如果你做了一个糟糕的决定，花时间反思为什么，并持续提高自己的判断力——这才是优秀创业者或产品经理的核心能力。

其次，当听取建议时，一定要弄清建议的来源和背后的原因，这样你才能形成自己独立的观点；同时要意识到，任何人的建议基本都不具备统计显著性。
11.
ChatGPT将促进教育平权
主观能动性变得空前重要

[S1]主持人：我特别喜欢问像你这样站在AI前沿的人，你是怎么教你孩子的。我知道你有孩子，我觉得等他们长大后，世界会非常不一样。你会鼓励他们学些什么东西，是你觉得和过去几代人不一样的，可以帮助他们在AI无处不在的世界里取得成功？

[S2]Bret Taylor：我不确定我的教育方式有没有变化，但我确实一直在鼓励他们把AI作为生活的一部分。我在回想，其实我1997年考AP微积分考试的时候，那时开始可以使用图形计算器。我一直在想，在允许使用计算器之前和之后，微积分考试内容有没有发生变化？我猜是有的。 

因为一旦允许在考试中使用计算器，就必须确保考试题目不会因为是否使用计算器而给学生带来不公平的优势，这就迫使出题人重新思考题目设计，用来考察的是微积分知识本身，而不是计算能力或图形计算器能完成的事情。 

我认为，现在的大部分教育体系并没有假设每个人口袋里都有一个超级智能。如果你让学生写一篇关于某本书的作文，其实他们完全可以用ChatGPT这类产品“编”出一篇文章。如果他们足够擅长提示词工程，甚至老师可能都看不出来是AI写的。 

那么该怎么办？我们该如何以不同的方式教育孩子？对老师来说，现在真的很难，因为教育还没完成像当年“加入计算器”的那种转型。现在我们用来评估学生的很多方法，都已经被ChatGPT这类工具打破了，正处于一个很尴尬的阶段。 

但我认为依然可以教孩子如何思考，也可以教他们如何学习。我们的教育系统终究可以赶上技术发展的步伐。事实上，我觉得这些AI模型可能是人类历史上最有效的教育工具之一。如果一个老师的教学方式不是你喜欢的风格，现在你可以回家请ChatGPT用另一种方式教你。我的孩子在考试前会用ChatGPT来做自测，他们可以选择语音模式或聊天模式，比用抽认卡效果更好。 

我女儿带回了一本莎士比亚的书，有一页她看不懂，她拍了张照片，ChatGPT解释得比我好得多。我觉得，今天这个世界上每一个孩子都拥有一个专属的个性化导师，能以他们最擅长的方式教学——无论是视觉、听觉还是文字阅读。我们现在有一个平台，不仅能教学，还能出题、测验。我觉得AI是一个“行动力放大器”。对于那些有主观能动性的孩子、渴望学习的孩子来说，他们等于拥有了所有曾教过他们的好老师的能力集合。而他们可以随时调用这种能力。 

我家孩子中，老大学会了编程，她正在做一个网站，每次她问我问题，我都让她自己去问ChatGPT，并不是因为我想当个讨人嫌的爸爸，而是我觉得她必须学会使用这个工具，因为它真的太强大了。所以我真心希望她们能学会如何建设性地把它融入生活。 

话虽如此，我对现在的公立学校老师非常有同理心。这太难了，因为技术的变化速度远快于教育系统的适应速度，尤其是在学生评估这一块，现在的确对老师是巨大挑战。我也担心，因为这些技术放大了主观能动性，反过来，如果孩子没有主观能动性，情况可能也会很糟糕。

当然，我知道图形计算器不等同于ChatGPT，但我们曾经设法成功地让作业、课堂教学和考试与已有的技术工具相适应，我相信我们这次也能做到。从更积极的角度看，我自己就是上公立学校的，有时候你会遇到一些很差劲的老师，而现在孩子们有了另一种出路。不再只有富人家的孩子才能请得起家教，现在每个孩子都可以获得辅导。 

如果你是一个在数学方面很有天赋的孩子，但你所在的学校没有开设高级统计学课程，那么现在可以自学了。我觉得这能极大地推动教育的普惠，特别是对那些有主观能动性的孩子来说，这真的令人兴奋。我真的希望，现在某个11岁的孩子，10年后能创办一家了不起的公司，而ChatGPT会是他最主要的导师，帮助他走到那一步。我觉得这太酷了。 

[S1]主持人：我现在有一个两岁的孩子，我感觉人生像进入了一个又一个的阶段，比如说什么时候给他手机、什么时候让他用Snapchat之类的东西——这些年孩子们都在用什么。现在还多了一个新问题：什么时候该给他们开通第一个ChatGPT账号？

[S2]Bret Taylor：我个人的看法是，ChatGPT不同于前面提到的那些。我不认为手机对在校学生或儿童有多大好处，我是主张尽量晚一点给孩子手机的。但ChatGPT更像是谷歌搜索。口袋里有个让人上瘾、推送不停的设备是一回事，而用AI来学习是另一回事。我觉得这两者完全不同。 

我真心认为AI本质上就是一种“公共产品”。以前还没有ChatGPT的时候，几乎没有家长会问“我孩子什么时候能用谷歌搜索？”因为那是不同类型的工具，我也是这样看待这类新技术的。 

https://36kr.com/p/3406437061987972? 
